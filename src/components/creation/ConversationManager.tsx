import { useState, useEffect, useRef } from "react";
import { supabase } from "@/lib/supabase";
import { toast } from "sonner";
import { Message, FormValues } from "@/components/types";
import MysteryChat from "@/components/MysteryChat";
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { useTranslation } from "react-i18next";

const getScriptTypeDisplayText = (scriptType: string) => {
  if (scriptType === 'pointForm') return 'point form';
  if (scriptType === 'both') return 'both full and point form';
  return 'full';
};

interface ConversationManagerProps {
  conversationId: string | null;
  formData: FormValues | null;
  onSaveMessages: (message: Message) => Promise<void>;
  userId: string | undefined;
  isEditing: boolean;
}

export const ConversationManager = ({
  conversationId,
  formData,
  onSaveMessages,
  userId,
  isEditing
}: ConversationManagerProps) => {
  const { t } = useTranslation();
  const [messages, setMessages] = useState<Message[]>([]);
  const [initialDataLoaded, setInitialDataLoaded] = useState(false);
  const [isLoadingHistory, setIsLoadingHistory] = useState(true);
  const [systemInstruction, setSystemInstruction] = useState<string | null>(null);
  const isMobile = useIsMobile();
  const initialPromptSent = useRef(false);

  useEffect(() => {
    if (conversationId && !initialDataLoaded) {
      loadExistingConversation(conversationId);
      setInitialDataLoaded(true);
    }
  }, [conversationId, initialDataLoaded, isEditing]);

  const loadExistingConversation = async (id: string) => {
    try {
      console.log("Loading conversation with ID:", id);
      setIsLoadingHistory(true);
      
      const { data, error } = await supabase
        .from("conversations")
        .select("*, messages(*), system_instruction")
        .eq("id", id)
        .order("created_at", { ascending: true })
        .single();

      if (error) {
        console.error("Error loading messages:", error);
        toast.error(t("mysteryCreation.errors.loadMessagesFailed"));
        return;
      }

      if (data) {
        console.log("Loaded messages:", data.messages?.length || 0);
        console.log("System instruction loaded:", !!data.system_instruction);
        
        if (data.system_instruction) {
          setSystemInstruction(data.system_instruction);
        }
        
        const formattedMessages = (data.messages || []).map((msg: any) => ({
          id: msg.id || `msg-${Date.now()}-${Math.random()}`,
          content: msg.content,
          is_ai: msg.role === "assistant",
          timestamp: new Date(msg.created_at || Date.now()),
          isAutoGenerated: false // Default value for existing messages
        }));
        
        formattedMessages.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());
        
        // Check if there's already an initial message about creating a mystery with a theme
        const hasInitialFormPrompt = formattedMessages.some(msg => 
          !msg.is_ai && msg.content.includes(`Let's create a murder mystery`)
        );
        
        if (hasInitialFormPrompt) {
          initialPromptSent.current = true; // Mark that we already have an initial prompt
        }
        
        setMessages(formattedMessages);
        
        if (formData && formData.additionalDetails && !hasInitialFormPrompt && 
            (!formattedMessages[0] || formattedMessages[0].is_ai)) {
          const initialUserMessage = constructInitialMessage(formData);
          if (initialUserMessage) {
            initialPromptSent.current = true;
            setMessages([initialUserMessage, ...formattedMessages]);
          }
        }
      } else {
        console.log("No messages found for conversation:", id);
        
        if (formData && !initialPromptSent.current) {
          const initialUserMessage = constructInitialMessage(formData);
          if (initialUserMessage) {
            initialPromptSent.current = true;
            setMessages([initialUserMessage]);
          }
        }
      }
    } catch (error) {
      console.error("Error:", error);
      toast.error(t("mysteryCreation.errors.loadConversationFailed"));
    } finally {
      setIsLoadingHistory(false);
    }
  };

  const constructInitialMessage = (data: FormValues): Message | null => {
    if (initialPromptSent.current) return null; // Don't create a new prompt if one already exists
    
    const initialChatMessage = data.theme
      ? t("mysteryCreation.guidance.initialPrompt.withTheme", { theme: data.theme })
      : t("mysteryCreation.guidance.initialPrompt.withoutTheme");

    return {
      id: "initial-message",
      content: initialChatMessage,
      is_ai: false,
      timestamp: new Date(0),
      isAutoGenerated: true // Mark this as auto-generated
    };
  };

  const handleSaveMessage = (message: Message) => {
    // Fix: Use onSaveMessages instead of onSave
    return onSaveMessages(message);
  };

  const createSystemMessage = (data: FormValues) => {
    // Start with a clear directive about one question at a time and MUST ask for player count first
    let systemMsg = "üö® CRITICAL INSTRUCTION: You MUST ask ONLY ONE QUESTION at a time. After each user response, address only that response before moving to the next question. NEVER batch multiple questions or proceed without user input. üö®\n\n";
    
    // Make player count request the absolute priority for first message
    systemMsg += "üö® FIRST QUESTION REQUIRED: Your VERY FIRST question must be to ask how many players the user needs for their murder mystery. This is mandatory before proceeding with ANY other questions or content generation. üö®\n\n";
    
    systemMsg += "This is a murder mystery creation conversation. ";
    
    // Only provide basic information about the theme as context
    if (data.theme) {
      systemMsg += `The user wants to create a murder mystery with theme: ${data.theme}. `;
    }
    
    systemMsg += "IMPORTANT: You must collect all necessary details from the user one step at a time. First, ask for the number of players needed. Then ask if an accomplice is needed. Only after collecting these details should you start developing characters and the mystery scenario.\n\n";
    
    // Include the full output format directly in the system message
    systemMsg += `\n\nYou MUST follow this exact output format for ALL your responses:

## OUTPUT FORMAT
Present your mystery preview in an engaging, dramatic format that will excite the user. Include:

# "[CREATIVE TITLE]" - A [THEME] MURDER MYSTERY

## PREMISE
[2-3 paragraphs setting the scene, describing the event where the murder takes place, and creating dramatic tension]

## VICTIM
**[Victim Name]** - [Vivid description of the victim, their role in the story, personality traits, and why they might have made enemies]

## CHARACTER LIST ([PLAYER COUNT] PLAYERS)
1. **[Character 1 Name]** - [Engaging one-sentence description including profession and connection to victim]
2. **[Character 2 Name]** - [Engaging one-sentence description including profession and connection to victim]
[Continue for all characters]

## MURDER METHOD
[Paragraph describing how the murder was committed, interesting details about the method, and what clues might be found]

[After presenting the mystery concept, ask if the concept works for them and explain that they can continue to make edits and that once they are done they can press the 'Generate Mystery' button where they can create a complete game package with detailed character guides, host instructions, and game materials if they choose to purchase.]`;

    // Add stronger instruction about player count again at the end
    systemMsg += "\n\nüö® REMINDER: Your FIRST question to the user MUST be to ask how many players they need for their mystery. DO NOT generate ANY mystery content without knowing the player count. üö®";
    
    // Add special instruction to prioritize user-entered messages over auto-generated ones
    systemMsg += "\n\n‚ö†Ô∏è IMPORTANT: You should prioritize responding to messages explicitly entered by users rather than auto-generated prompts. Pay special attention to user inputs that ask specific questions or provide detailed requirements.";
    
    return systemMsg;
  };

  return (
    <div className={cn(
      "w-full h-full", 
      isMobile && "h-[calc(100vh-90px)] mobile-borderless"
    )}>
      <MysteryChat
        initialTheme={formData?.theme || ""}
        initialPlayerCount={formData?.playerCount}
        initialHasAccomplice={formData?.hasAccomplice}
        initialScriptType={formData?.scriptType as 'full' | 'pointForm'}
        initialAdditionalDetails={formData?.additionalDetails}
        savedMysteryId={conversationId || undefined}
        onSave={handleSaveMessage}
        initialMessages={messages}
        isLoadingHistory={isLoadingHistory}
        systemInstruction={createSystemMessage(formData || {})}
        preventDuplicateMessages={true}
        skipForm={initialPromptSent.current} // Skip form generation if we already have an initial prompt
      />
    </div>
  );
};

export default ConversationManager;
