
import { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { toast } from "sonner";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { supabase } from "@/lib/supabase";
import MysteryChat from "@/components/MysteryChat";
import { useAuth } from "@/context/AuthContext";
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Message } from "@/components/types";
import { Loader2, ArrowLeft } from "lucide-react";

const MysteryChatPage = () => {
    const [messages, setMessages] = useState<Message[]>([]);
    const [conversationData, setConversationData] = useState<any>(null);
    const [isLoadingHistory, setIsLoadingHistory] = useState(true);
    const [isGeneratingPackage, setIsGeneratingPackage] = useState(false);
    const navigate = useNavigate();
    const { id } = useParams();
    const { isAuthenticated, user } = useAuth();
    const isMobile = useIsMobile();

    useEffect(() => {
        if (id && isAuthenticated) {
            loadConversationData();
        }
    }, [id, isAuthenticated]);

    const loadConversationData = async () => {
        try {
            setIsLoadingHistory(true);
            
            const { data, error } = await supabase
                .from("conversations")
                .select("*, messages(*)")
                .eq("id", id)
                .single();

            if (error) {
                console.error("Error loading conversation:", error);
                toast.error("Failed to load conversation");
                return;
            }

            if (data) {
                setConversationData(data);
                
                // Load messages and sort by timestamp
                const formattedMessages = (data.messages || []).map((msg: any) => ({
                    id: msg.id,
                    content: msg.content,
                    is_ai: msg.role === "assistant",
                    timestamp: new Date(msg.created_at),
                    isAutoGenerated: false
                }));
                
                formattedMessages.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());
                setMessages(formattedMessages);
            }
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to load conversation");
        } finally {
            setIsLoadingHistory(false);
        }
    };

    const handleSaveMessage = async (message: Message) => {
        if (!id) return;
        
        try {
            await supabase.from("messages").insert({
                conversation_id: id,
                content: message.content,
                role: message.is_ai ? "assistant" : "user",
                is_ai: message.is_ai
            });
        } catch (error) {
            console.error("Error saving message:", error);
            toast.error("Failed to save message");
        }
    };

    const handleGenerateCompletePackage = async () => {
        if (!id || !conversationData) return;
        
        setIsGeneratingPackage(true);
        
        try {
            // Trigger the webhook generation process
            const { data, error } = await supabase.functions.invoke('mystery-webhook-trigger', {
                body: {
                    conversation_id: id,
                    user_id: user?.id,
                    mystery_data: conversationData.mystery_data
                }
            });

            if (error) {
                console.error("Error triggering generation:", error);
                toast.error("Failed to start package generation");
                return;
            }

            toast.success("Package generation started! You'll be redirected when complete.");
            
            // Navigate to the final mystery view
            navigate(`/mystery/${id}`);
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to generate complete package");
        } finally {
            setIsGeneratingPackage(false);
        }
    };

    if (isLoadingHistory) {
        return (
            <div className="min-h-screen flex flex-col">
                <Header />
                <main className="flex-1 flex items-center justify-center">
                    <div className="text-center">
                        <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
                        <p className="text-muted-foreground">Loading conversation...</p>
                    </div>
                </main>
                <Footer />
            </div>
        );
    }

    return (
        <div className="min-h-screen flex flex-col">
            <Header />
            <main className={cn("flex-1", isMobile ? "py-4 px-2" : "py-12 px-4")}>
                <div className={cn("container mx-auto", isMobile ? "max-w-full" : "max-w-4xl")}>
                    <div className={cn("mb-8", isMobile && "mb-4")}>
                        <div className="flex items-center gap-4 mb-4">
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={() => navigate("/dashboard")}
                            >
                                <ArrowLeft className="h-4 w-4 mr-2" />
                                Back to Dashboard
                            </Button>
                        </div>
                        
                        <h1 className={cn("text-3xl font-bold mb-2", isMobile && "text-2xl mb-1")}>
                            {conversationData?.title || "Mystery Chat"}
                        </h1>
                        <p className="text-muted-foreground">
                            Chat with AI to refine your mystery concept
                        </p>
                    </div>

                    <Card className={isMobile ? "border-0 shadow-none bg-transparent" : ""}>
                        <CardContent className={cn("p-6", isMobile && "p-0")}>
                            <MysteryChat
                                initialTheme={conversationData?.mystery_data?.theme || ""}
                                initialPlayerCount={conversationData?.mystery_data?.playerCount}
                                initialScriptType={conversationData?.mystery_data?.scriptType as 'full' | 'pointForm'}
                                initialAdditionalDetails={conversationData?.mystery_data?.additionalDetails}
                                savedMysteryId={id}
                                onSave={handleSaveMessage}
                                initialMessages={messages}
                                isLoadingHistory={false}
                                systemInstruction={conversationData?.system_instruction}
                                skipForm={true}
                            />
                        </CardContent>
                    </Card>

                    <div className={cn("mt-8 flex flex-col gap-4", isMobile && "mt-4")}>
                        <div className="flex justify-center">
                            <Button
                                onClick={handleGenerateCompletePackage}
                                disabled={isGeneratingPackage || messages.length < 2}
                                size="lg"
                                className="bg-green-600 hover:bg-green-700"
                            >
                                {isGeneratingPackage ? (
                                    <>
                                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                        Generating Complete Package...
                                    </>
                                ) : (
                                    "Generate Complete Package"
                                )}
                            </Button>
                        </div>
                        
                        <p className="text-center text-sm text-muted-foreground">
                            Ready to create your complete mystery package? This will generate detailed character guides, host instructions, and all game materials.
                        </p>
                    </div>
                </div>
            </main>
            <Footer />
        </div>
    );
};

export default MysteryChatPage;
