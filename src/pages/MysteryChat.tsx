import { useState, useEffect } from "react";
import { useNavigate, useParams, useSearchParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import Header from "@/components/Header";
import { supabase } from "@/lib/supabase";
import MysteryChat from "@/components/MysteryChat";
import { useAuth } from "@/context/AuthContext";
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Message } from "@/components/types";
import { Loader2, ArrowLeft, Zap } from "lucide-react";

const MysteryChatPage = () => {
    const [messages, setMessages] = useState<Message[]>([]);
    const [conversationData, setConversationData] = useState<any>(null);
    const [isLoadingHistory, setIsLoadingHistory] = useState(true);
    const navigate = useNavigate();
    const { id } = useParams();
    const [searchParams] = useSearchParams();
    const isInitial = searchParams.get('initial') === 'true';
    const { isAuthenticated, user } = useAuth();
    const isMobile = useIsMobile();

    useEffect(() => {
        if (id && isAuthenticated) {
            loadConversationData();
        }
    }, [id, isAuthenticated]);

    const loadConversationData = async () => {
        try {
            setIsLoadingHistory(true);
            
            const { data, error } = await supabase
                .from("conversations")
                .select("*, messages(*)")
                .eq("id", id)
                .single();

            if (error) {
                console.error("Error loading conversation:", error);
                toast.error("Failed to load conversation");
                return;
            }

            if (data) {
                setConversationData(data);
                
                // Load messages and sort by timestamp
                const formattedMessages = (data.messages || []).map((msg: any) => ({
                    id: msg.id,
                    content: msg.content,
                    is_ai: msg.role === "assistant",
                    timestamp: new Date(msg.created_at),
                    isAutoGenerated: false
                }));
                
                formattedMessages.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());
                setMessages(formattedMessages);
            }
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to load conversation");
        } finally {
            setIsLoadingHistory(false);
        }
    };

    const handleSaveMessage = async (message: Message) => {
        if (!id) return;
        
        try {
            await supabase.from("messages").insert({
                conversation_id: id,
                content: message.content,
                role: message.is_ai ? "assistant" : "user",
                is_ai: message.is_ai
            });

            // Update local messages state to keep button state in sync
            setMessages(prev => {
                const exists = prev.some(msg => msg.id === message.id);
                if (exists) {
                    return prev;
                }
                return [...prev, message].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());
            });
        } catch (error) {
            console.error("Error saving message:", error);
            toast.error("Failed to save message");
        }
    };

    const handleGenerateFullMystery = () => {
        navigate(`/mystery/purchase/${id}`);
    };

    // Check if AI has provided at least one response
    const hasAIResponse = messages.some(msg => msg.is_ai);

    if (isLoadingHistory) {
        return (
            <div className="min-h-screen flex flex-col">
                <Header />
                <main className="flex-1 flex items-center justify-center">
                    <div className="text-center px-4">
                        <Loader2 className="h-6 w-6 sm:h-8 sm:w-8 animate-spin mx-auto mb-4" />
                        <p className="text-sm sm:text-base text-muted-foreground">Loading conversation...</p>
                    </div>
                </main>
            </div>
        );
    }

    return (
        <div className="min-h-screen flex flex-col bg-[#F7F3E9]">
            <Header />
            <main className="flex-1 flex flex-col relative pb-32">
                {/* Back button - only visible at top of page */}
                <div className={cn(
                    "sticky top-0 z-10 bg-[#F7F3E9]/95 backdrop-blur-sm border-b border-gray-200/50",
                    isMobile ? "py-2 px-3" : "py-4 px-4"
                )}>
                    <div className="container mx-auto max-w-4xl">
                        <Button
                            variant="outline"
                            size={isMobile ? "sm" : "default"}
                            onClick={() => navigate("/dashboard")}
                            className={cn(
                                "flex items-center gap-2 bg-white/80 hover:bg-white shadow-sm",
                                isMobile && "h-9 px-3 text-sm"
                            )}
                        >
                            <ArrowLeft className="h-3 w-3 sm:h-4 sm:w-4" />
                            <span>Dashboard</span>
                        </Button>
                    </div>
                </div>

                {/* Chat content - takes full page height */}
                <div className="flex-1 w-full max-w-4xl mx-auto px-3 sm:px-4 pt-4">
                    <MysteryChat
                        initialTheme={conversationData?.mystery_data?.theme || ""}
                        initialPlayerCount={conversationData?.mystery_data?.playerCount}
                        initialScriptType={conversationData?.mystery_data?.scriptType as 'full' | 'pointForm'}
                        initialAdditionalDetails={conversationData?.mystery_data?.additionalDetails}
                        savedMysteryId={id}
                        onSave={handleSaveMessage}
                        initialMessages={messages}
                        isLoadingHistory={false}
                        systemInstruction={conversationData?.system_instruction}
                        skipForm={true}
                        needsInitialAIResponse={isInitial}
                    />
                </div>

                {/* Fixed bottom action button */}
                <div className={cn(
                    "fixed bottom-0 left-0 right-0 z-20 bg-[#F7F3E9] border-t border-gray-200/50 py-4 px-4",
                    isMobile ? "py-3" : "py-4"
                )}>
                    <div className="container mx-auto max-w-4xl flex justify-center">
                        <Button
                            onClick={handleGenerateFullMystery}
                            disabled={!hasAIResponse}
                            size={isMobile ? "default" : "lg"}
                            className={cn(
                                "bg-[#8B1538] hover:bg-[#6B0F28] text-white font-medium shadow-md",
                                isMobile ? "w-full h-12 text-base" : "px-6 h-12"
                            )}
                        >
                            <Zap className="h-4 w-4 mr-2" />
                            Generate Full Mystery
                        </Button>
                    </div>
                </div>
            </main>
        </div>
    );
};

export default MysteryChatPage;